from datetime import datetime, timedelta
import shutil

import click
import requests
import yaml

from DataQualityTester import app
from DataQualityTester.models import SuppliedData


@app.cli.command()
@click.option('-a', '--all', 'flush_all', is_flag=True)
def flush_data(flush_all):
    """
    Delete files that are older than 7 days (or all files, using the --all switch)
    """
    if flush_all:
        old_data = SuppliedData.query.all()
    else:
        old_data = SuppliedData.query.filter(SuppliedData.created <= datetime.utcnow() - timedelta(days=7))
    for supplied_data in old_data:
        try:
            shutil.rmtree(supplied_data.upload_dir())
        except FileNotFoundError:
            continue

@app.cli.command()
def refresh_codelists():
    """
    Refresh internally-stored codelists from IATI
    """
    mapping_tmpl = 'http://iatistandard.org/{version}/codelists/downloads/clv2/mapping.json'
    codelist_tmpl = 'http://iatistandard.org/{version}/codelists/downloads/clv2/json/en/{codelist_name}.json'
    versions = ('1.05', '2.02',)

    codelists = {}

    for version in versions:
        print('loading mapping version-{version} ...'.format(version=version))
        version = version.replace('.', '')
        mapping = requests.get(mapping_tmpl.format(version=version)).json()
        codelist_names = {x['codelist']: None for x in mapping}.keys()
        for codelist_name in codelist_names:
            print('loading codelist {codelist_name} (version-{version}) ...'.format(codelist_name=codelist_name, version=version))
            codelist = requests.get(codelist_tmpl.format(version=version, codelist_name=codelist_name)).json()
            if codelist['attributes']['complete'] != '1':
                continue
            codes = [entry['code'] for entry in codelist['data']]
            if codelist_name not in codelists:
                codelists[codelist_name] = set()
            codelists[codelist_name].update(codes)

    codelists = {codelist_name: list(codelist_set) for codelist_name, codelist_set in codelists.items()}

    print('writing codelists.yaml ...')
    with open('codelists.yaml', 'w') as f:
        f.write('# THIS FILE IS AUTO-GENERATED BY `python manage.py refresh-codelists`\n')
        yaml.dump(codelists, f)
