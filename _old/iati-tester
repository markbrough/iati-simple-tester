#!/usr/bin/env python
from foxpath import test
import unicodecsv
import os
from IATISimpleTester import helpers
from config import Config
import optparse
import sys


headers = [
    'result',
    'iati-identifier',
    'hierarchy',
    'recipient-country',
    'test-name',
    'package-name',
    'current-result',
]


def get_xml_in_dir(package_group_name, relative_dir):
    filenames = []

    current_script_dir = os.path.dirname(os.path.abspath(__file__))
    thedir = os.path.join(current_script_dir, os.path.abspath(relative_dir))

    for file in os.listdir(thedir):
        if (file.startswith(package_group_name) and file.endswith(".xml")):
            abs_filename = os.path.join(thedir, file)
            filenames.append({
                'absolute_filename': abs_filename,
                'filename': file,
                'name': os.path.splitext(file)[0]
            })
    return filenames


def run_tests(packages, packagegroup_condition, csvfile, tests):
    print("Opening new CSV file, beginning testing")

    writer = unicodecsv.DictWriter(csvfile, headers)
    hdict = dict([(h, h) for h in headers])
    writer.writerow(hdict)

    for package in packages:
        print("Testing and writing for package: {}".format(package['name']))
        for atest in tests:
            # test a package against one test
            results = test.test_doc_json_out(
                package['absolute_filename'],
                atest['expression'],
                packagegroup_condition,
                Config.CURRENT_TEST,
                Config.LISTS
            )
            for activity_result in results['activities']:
                activity_result['test-name'] = atest['name']
                activity_result['package-name'] = package['name']
                writer.writerow(activity_result)

    print("Complete")


def run_packagegroup_tests(options):
    if options.packagegroup:
        package_group_name = options.packagegroup
    else:
        package_group_name = Config.PACKAGEGROUP_NAME

    if options.packagecondition:
        package_condition = options.packagecondition
    else:
        package_condition = Config.PACKAGEGROUP_CONDITION

    if options.dir_for_testing:
        dir_for_testing = options.dir_for_testing
    else:
        dir_for_testing = Config.DIR_FOR_TESTING

    packages = get_xml_in_dir(package_group_name, dir_for_testing)

    if options.tests_file:
        tests = helpers.load_expressions_from_csvfile(options.tests_file)
    else:
        tests = helpers.load_expressions_from_csvfile(Config.TESTS_FILE)
    if options.output_file:
        output_stream = open(options.output_file, 'w')
    else:
        output_stream = sys.stdout

    return run_tests(packages, package_condition, output_stream, tests)


def get_options():
    parser = optparse.OptionParser()
    parser.add_option("--package-group", dest="packagegroup", action="store")
    parser.add_option("--package-condition", dest="packagecondition",
                      action="store")
    parser.add_option("--tests-file", dest="tests_file", action="store")
    parser.add_option("--dir-for-testing", dest="dir_for_testing",
                      action="store")
    parser.add_option("--output-file", dest="output_file", action="store")
    options, rest = parser.parse_args()
    return options


if __name__ == "__main__":
    options = get_options()
    run_packagegroup_tests(options)
